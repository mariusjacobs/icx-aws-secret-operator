#!/usr/bin/python3
import json
import os
import subprocess
import sys
import yaml

def process_file(filename):
    try:
        with open(filename) as f:
            contents = yaml.load(f, Loader=yaml.FullLoader)

        assert contents['kind'] == 'AWSSecret'
        local_info = contents['spec']['stringDataFrom']['secretsManagerSecretRef']
        secret_id = local_info['secretId']
        local_version_id = local_info['versionId']
    except Exception as e:
        print('{} does not look like AWSSecret file, skipping.'.format(filename))
        return

    try:
        remote_info = json.loads(
            subprocess.check_output(
                ['aws', 'secretsmanager', 'describe-secret', '--secret-id', secret_id]))
        for version_id, stages in remote_info['VersionIdsToStages'].items():
            if 'AWSCURRENT' in stages:
                if version_id != local_version_id:
                    sed_command = 's/{}/{}/g'.format(local_version_id, version_id)
                    subprocess.run(['sed', '-i', '-e', sed_command, filename])
                    print('Updated {}'.format(filename))
                else:
                    print('{} is up to date.'.format(filename))
        
    except Exception as e:
        print('Error when checking or updating {}'.format(filename))
        print(e)


if __name__ == '__main__':
    if len(sys.argv) == 1:
        print('Usage: update-aws-secret-ids filename ...')
        print()
        print('Fetches current secret ids from AWS and patches AWSSecret manifests if necessary.')

    if 'AWS_VAULT' not in os.environ:
        print('Please run this command under aws-vault.')
        exit(1)

    for filename in sys.argv[1:]:
        process_file(filename)
